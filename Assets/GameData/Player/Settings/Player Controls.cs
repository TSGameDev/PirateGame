//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameData/Player/Settings/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""3966ef9b-28db-4b3d-9f3c-a02957e47404"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""f5357f43-bf7c-4104-91fb-f9ef1c766ea2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ccf883d0-bbfc-4a96-a8e1-abb8eb1e5526"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jumping"",
                    ""type"": ""Button"",
                    ""id"": ""cbafd489-9595-40e0-9469-ef6da39e3b0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintToggle"",
                    ""type"": ""Button"",
                    ""id"": ""9f99e995-80c2-4da9-ad24-77619134b395"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkToggle"",
                    ""type"": ""Button"",
                    ""id"": ""fb1f78e1-a91d-4ed1-8cd6-ae280f976ecb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchToggle"",
                    ""type"": ""Button"",
                    ""id"": ""a734ac92-e89b-42be-9023-02d2978b5e47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CombatToggle"",
                    ""type"": ""Button"",
                    ""id"": ""ef33d730-09bb-4b42-bc24-734e1b25843b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandAttack"",
                    ""type"": ""Button"",
                    ""id"": ""79064547-786c-4b62-80e3-f22670aacc11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandAttack"",
                    ""type"": ""Button"",
                    ""id"": ""791f4f3b-49ba-4701-b87b-207d71147bd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Parry/DualAttack"",
                    ""type"": ""Button"",
                    ""id"": ""4bfc7696-566b-4364-a2a3-6ea25aba11cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""209dcd21-87d1-4c76-b320-feb88ab5cea3"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Movement"",
                    ""id"": ""d09e9d8f-4296-49a4-9aaa-79b47e8b621a"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5a2c3ae-0096-45c8-98d2-e121cb4c4ce3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0430e350-8bc2-4261-8c9e-8734ef2edd46"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f5d26bf-a99b-4f37-81c6-58870e65a417"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b272745f-7564-4cad-94d4-ff7e0c160c60"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e9b06d9b-305c-4170-b182-00886c2d0314"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a871609b-9767-43c5-9795-45ce2b45da19"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9295c338-2bf0-4997-a570-a064ec0a51a9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CombatToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e5dd1e0-06c3-48e6-a67f-760ef21f2478"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jumping"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f0f8e4b-987b-41ff-b30a-3dbc7c01fd9d"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08a03c16-3d65-4069-89e0-02b32d394d9c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b55672de-71ad-481a-976e-ba9bbc1a8720"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f77169e6-4dc0-497c-acf1-2efeb9f0d652"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Parry/DualAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_MouseDelta = m_Game.FindAction("MouseDelta", throwIfNotFound: true);
        m_Game_Movement = m_Game.FindAction("Movement", throwIfNotFound: true);
        m_Game_Jumping = m_Game.FindAction("Jumping", throwIfNotFound: true);
        m_Game_SprintToggle = m_Game.FindAction("SprintToggle", throwIfNotFound: true);
        m_Game_WalkToggle = m_Game.FindAction("WalkToggle", throwIfNotFound: true);
        m_Game_CrouchToggle = m_Game.FindAction("CrouchToggle", throwIfNotFound: true);
        m_Game_CombatToggle = m_Game.FindAction("CombatToggle", throwIfNotFound: true);
        m_Game_LeftHandAttack = m_Game.FindAction("LeftHandAttack", throwIfNotFound: true);
        m_Game_RightHandAttack = m_Game.FindAction("RightHandAttack", throwIfNotFound: true);
        m_Game_ParryDualAttack = m_Game.FindAction("Parry/DualAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_MouseDelta;
    private readonly InputAction m_Game_Movement;
    private readonly InputAction m_Game_Jumping;
    private readonly InputAction m_Game_SprintToggle;
    private readonly InputAction m_Game_WalkToggle;
    private readonly InputAction m_Game_CrouchToggle;
    private readonly InputAction m_Game_CombatToggle;
    private readonly InputAction m_Game_LeftHandAttack;
    private readonly InputAction m_Game_RightHandAttack;
    private readonly InputAction m_Game_ParryDualAttack;
    public struct GameActions
    {
        private @PlayerControls m_Wrapper;
        public GameActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_Game_MouseDelta;
        public InputAction @Movement => m_Wrapper.m_Game_Movement;
        public InputAction @Jumping => m_Wrapper.m_Game_Jumping;
        public InputAction @SprintToggle => m_Wrapper.m_Game_SprintToggle;
        public InputAction @WalkToggle => m_Wrapper.m_Game_WalkToggle;
        public InputAction @CrouchToggle => m_Wrapper.m_Game_CrouchToggle;
        public InputAction @CombatToggle => m_Wrapper.m_Game_CombatToggle;
        public InputAction @LeftHandAttack => m_Wrapper.m_Game_LeftHandAttack;
        public InputAction @RightHandAttack => m_Wrapper.m_Game_RightHandAttack;
        public InputAction @ParryDualAttack => m_Wrapper.m_Game_ParryDualAttack;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMouseDelta;
                @Movement.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMovement;
                @Jumping.started -= m_Wrapper.m_GameActionsCallbackInterface.OnJumping;
                @Jumping.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnJumping;
                @Jumping.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnJumping;
                @SprintToggle.started -= m_Wrapper.m_GameActionsCallbackInterface.OnSprintToggle;
                @SprintToggle.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnSprintToggle;
                @SprintToggle.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnSprintToggle;
                @WalkToggle.started -= m_Wrapper.m_GameActionsCallbackInterface.OnWalkToggle;
                @WalkToggle.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnWalkToggle;
                @WalkToggle.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnWalkToggle;
                @CrouchToggle.started -= m_Wrapper.m_GameActionsCallbackInterface.OnCrouchToggle;
                @CrouchToggle.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnCrouchToggle;
                @CrouchToggle.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnCrouchToggle;
                @CombatToggle.started -= m_Wrapper.m_GameActionsCallbackInterface.OnCombatToggle;
                @CombatToggle.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnCombatToggle;
                @CombatToggle.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnCombatToggle;
                @LeftHandAttack.started -= m_Wrapper.m_GameActionsCallbackInterface.OnLeftHandAttack;
                @LeftHandAttack.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnLeftHandAttack;
                @LeftHandAttack.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnLeftHandAttack;
                @RightHandAttack.started -= m_Wrapper.m_GameActionsCallbackInterface.OnRightHandAttack;
                @RightHandAttack.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnRightHandAttack;
                @RightHandAttack.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnRightHandAttack;
                @ParryDualAttack.started -= m_Wrapper.m_GameActionsCallbackInterface.OnParryDualAttack;
                @ParryDualAttack.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnParryDualAttack;
                @ParryDualAttack.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnParryDualAttack;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jumping.started += instance.OnJumping;
                @Jumping.performed += instance.OnJumping;
                @Jumping.canceled += instance.OnJumping;
                @SprintToggle.started += instance.OnSprintToggle;
                @SprintToggle.performed += instance.OnSprintToggle;
                @SprintToggle.canceled += instance.OnSprintToggle;
                @WalkToggle.started += instance.OnWalkToggle;
                @WalkToggle.performed += instance.OnWalkToggle;
                @WalkToggle.canceled += instance.OnWalkToggle;
                @CrouchToggle.started += instance.OnCrouchToggle;
                @CrouchToggle.performed += instance.OnCrouchToggle;
                @CrouchToggle.canceled += instance.OnCrouchToggle;
                @CombatToggle.started += instance.OnCombatToggle;
                @CombatToggle.performed += instance.OnCombatToggle;
                @CombatToggle.canceled += instance.OnCombatToggle;
                @LeftHandAttack.started += instance.OnLeftHandAttack;
                @LeftHandAttack.performed += instance.OnLeftHandAttack;
                @LeftHandAttack.canceled += instance.OnLeftHandAttack;
                @RightHandAttack.started += instance.OnRightHandAttack;
                @RightHandAttack.performed += instance.OnRightHandAttack;
                @RightHandAttack.canceled += instance.OnRightHandAttack;
                @ParryDualAttack.started += instance.OnParryDualAttack;
                @ParryDualAttack.performed += instance.OnParryDualAttack;
                @ParryDualAttack.canceled += instance.OnParryDualAttack;
            }
        }
    }
    public GameActions @Game => new GameActions(this);
    public interface IGameActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnJumping(InputAction.CallbackContext context);
        void OnSprintToggle(InputAction.CallbackContext context);
        void OnWalkToggle(InputAction.CallbackContext context);
        void OnCrouchToggle(InputAction.CallbackContext context);
        void OnCombatToggle(InputAction.CallbackContext context);
        void OnLeftHandAttack(InputAction.CallbackContext context);
        void OnRightHandAttack(InputAction.CallbackContext context);
        void OnParryDualAttack(InputAction.CallbackContext context);
    }
}
